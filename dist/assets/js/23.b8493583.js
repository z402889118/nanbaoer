(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{303:function(t,e,a){"use strict";a.r(e);var n=a(14),l=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"net基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#net基础"}},[t._v("#")]),t._v(" .NET基础")]),t._v(" "),e("h2",{attrs:{id:"c-数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-数据类型"}},[t._v("#")]),t._v(" C#数据类型")]),t._v(" "),e("p",[t._v("C# 是面向对象的强类型高级语言，内置用于存储不同类型数据的内置数据类型。每种数据类型包含特定的取值范围，使用这些数据类型来表示在应用程序中存储的数据。数据类型进一步又被分为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("• 值类型（Value types）\n• 引用类型（Reference types）\n• 指针类型（Pointer types）\n")])])]),e("p",[t._v("值类型特点："),e("strong",[t._v("变量直接存储其值，派生于 "),e("code",[t._v("System.ValueType")])]),t._v("。值类型又细分为整数值类型、浮点类型、简单类型、枚举类型、结构类型、可以为 "),e("code",[t._v("null")]),t._v(" 的值类型。")]),t._v(" "),e("h3",{attrs:{id:"一、-值类型-value-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、-值类型-value-types"}},[t._v("#")]),t._v(" 一、*值类型（Value types）")]),t._v(" "),e("p",[t._v("值类型变量可以直接分配给一个值。它们是从类 "),e("code",[t._v("System.ValueType")]),t._v(" 中派生的。值类型直接包含数据。比如 "),e("code",[t._v("int")]),t._v("、"),e("code",[t._v("char")]),t._v("、"),e("code",[t._v("float")]),t._v("，它们分别存储数字、字母、浮点数。当您声明一个 "),e("code",[t._v("int")]),t._v(" 类型时，系统分配内存来存储值。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("范围")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("默认值")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("布尔值")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("True 或 False")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("False")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("byte")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("8 位无符号整数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0 到 255")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("char")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("16 位 Unicode 字符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("U +0000 到 U +ffff")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("'\\0'")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("decimal")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("128 位精确的十进制值，28-29 有效位数（浮点型）")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(-7.9 x 1028 到 7.9 x 1028) / 100 到 28")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.0M")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("64 位双精度浮点型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.0D")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("32 位单精度浮点型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-3.4 x 1038 到 + 3.4 x 1038")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0.0F")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("32 位有符号整数类型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-2,147,483,648 到 2,147,483,647")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("64 位有符号整数类型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-923,372,036,854,775,808 到 9,223,372,036,854,775,807")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0L")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("sbyte")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("8 位有符号整数类型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-128 到 127")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("short")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("16 位有符号整数类型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-32,768 到 32,767")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("uint")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("32 位无符号整数类型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0 到 4,294,967,295")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ulong")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("64 位无符号整数类型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0 到 18,446,744,073,709,551,615")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ushort")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("16 位无符号整数类型")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0 到 65,535")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])])])]),t._v(" "),e("p",[t._v("如需得到一个类型或一个变量在特定平台上的准确尺寸，可以使用 "),e("code",[t._v("sizeof")]),t._v(" 方法。表达式 "),e("code",[t._v("sizeof(type)")]),t._v(" 产生以字节为单位存储对象或类型的存储尺寸。下面举例获取任何机器上 "),e("code",[t._v("int")]),t._v(" 类型的存储尺寸：")]),t._v(" "),e("p",[t._v("字节（Byte）是计算机信息技术用于计量存储容量的一种计量单位，也表示一些计算机编程语言中的数据类型和语言字符 [1] 。")]),t._v(" "),e("p",[t._v("一个字节存储8位无符号数，储存的数值范围为0-255。如同字元一样，字节型态的变数只需要用一个位元组（8位元）的内存空间储存 [1] 。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  namespace DataTypeApplication\n      {\n         class Program\n         {\n            static void Main(string[] args)\n            {\n               Console.WriteLine("Size of int: {0}", sizeof(int));\n               Console.ReadLine();\n            }\n         }\n      }\n')])])]),e("p",[t._v("当上面的代码被编译和执行时，它会产生下列结果：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" Size of int: 4\n")])])]),e("h3",{attrs:{id:"二、引用类型-reference-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、引用类型-reference-types"}},[t._v("#")]),t._v(" 二、引用类型（Reference types）")]),t._v(" "),e("p",[t._v("引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。内置的 引用类型有："),e("code",[t._v("object")]),t._v("、"),e("code",[t._v("dynamic")]),t._v(" 和 "),e("code",[t._v("string")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"_1-、对象-object-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-、对象-object-类型"}},[t._v("#")]),t._v(" （1）、对象（Object）类型")]),t._v(" "),e("p",[t._v("对象（"),e("code",[t._v("Object")]),t._v("）类型 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。"),e("code",[t._v("Object")]),t._v(" 是 "),e("code",[t._v("System.Object")]),t._v(" 类的别名。所以对象（"),e("code",[t._v("Object")]),t._v("）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。"),e("strong",[t._v("当一个值类型转换为对象类型时，则被称为 装箱；另一方面，当一个对象类型转换为值类型时，则被称为 拆箱。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    object obj;    obj = 100; // 这是装箱\n")])])]),e("h4",{attrs:{id:"_2-、动态-dynamic-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-、动态-dynamic-类型"}},[t._v("#")]),t._v(" （2）、动态（Dynamic）类型")]),t._v(" "),e("p",[t._v("您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。声明动态类型的语法：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    dynamic <variable_name> = value;\n")])])]),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    dynamic d = 20;\n")])])]),e("p",[t._v("动态类型与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的。")]),t._v(" "),e("h4",{attrs:{id:"_3-、字符串-string-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-、字符串-string-类型"}},[t._v("#")]),t._v(" （3）、字符串（String）类型")]),t._v(" "),e("p",[t._v("字符串（"),e("code",[t._v("String")]),t._v("）类型 允许您给变量分配任何字符串值。字符串（"),e("code",[t._v("String")]),t._v("）类型是 "),e("code",[t._v("System.String")]),t._v(" 类的别名。它是从对象（"),e("code",[t._v("Object")]),t._v("）类型派生的。字符串（"),e("code",[t._v("String")]),t._v("）类型的值可以通过两种形式进行分配："),e("strong",[t._v("引号")]),t._v("和 "),e("strong",[t._v("@引号")]),t._v("。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    String str = "runoob.com";\n')])])]),e("p",[t._v("一个 @引号字符串：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    @"runoob.com";\n')])])]),e("p",[t._v("C# "),e("code",[t._v("string")]),t._v(" 字符串的前面可以加 "),e("strong",[t._v("@")]),t._v('（称作"逐字字符串"）'),e("strong",[t._v("将转义字符（\\）当作普通字符对待")]),t._v("，比如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    string str = @"C:\\Windows";\n')])])]),e("p",[t._v("等价于：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    string str = "C:\\\\Windows";\n')])])]),e("p",[t._v("@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('       string str = @"<script type=""text/javascript"">           \x3c!--           --\x3e       <\/script>";\n')])])]),e("p",[t._v("用户自定义引用类型有："),e("code",[t._v("class")]),t._v("、"),e("code",[t._v("interface")]),t._v(" 或 "),e("code",[t._v("delegate")]),t._v("。我们将在以后的章节中讨论这些类型。")]),t._v(" "),e("h3",{attrs:{id:"三、-指针类型-pointer-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、-指针类型-pointer-types"}},[t._v("#")]),t._v(" 三、*指针类型（Pointer types）")]),t._v(" "),e("p",[t._v("指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。")]),t._v(" "),e("p",[t._v("声明指针类型的语法：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    type* identifier;\n")])])]),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" 复制代码    char* cptr;    int* iptr;\n")])])]),e("h3",{attrs:{id:"四、枚举"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、枚举"}},[t._v("#")]),t._v(" 四、枚举")]),t._v(" "),e("p",[e("code",[t._v("enum")]),t._v(" 是值类型数据类型。枚举用于声明命名整数常量的列表。可以直接在命名空间，类或结构中使用 "),e("code",[t._v("enum")]),t._v(" 关键字定义。")]),t._v(" "),e("ul",[e("li",[t._v("枚举用于为每个常量指定一个名称，以便可以使用其名称引用常量整数默认情况下，枚举的第一个成员的值为 0，每个连续的枚举成员的值增加 1")]),t._v(" "),e("li",[t._v("枚举可以包括数字数据类型的命名常量，例如 "),e("code",[t._v("byte")]),t._v("，"),e("code",[t._v("sbyte")]),t._v("，"),e("code",[t._v("short")]),t._v("，"),e("code",[t._v("ushort")]),t._v("，"),e("code",[t._v("int")]),t._v("，"),e("code",[t._v("uint")]),t._v("，"),e("code",[t._v("long")]),t._v(" 或 "),e("code",[t._v("ulong")])]),t._v(" "),e("li",[t._v("枚举不能与字符串类型一起使用")])]),t._v(" "),e("p",[e("code",[t._v("Enum")]),t._v(" 是一个抽象类，包含用于枚举的静态帮助器方法")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("Enum method")])]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("Description")])])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("Format")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将指定的枚举类型值转换为指定的字符串格式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("GetName")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回指定枚举的指定值的常量的名称")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("GetNames")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回指定枚举的所有常量的字符串名称数组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("GetValues")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回指定枚举的所有常量值的数组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("object Parse(type, string)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将一个或多个枚举常量的名称或数值的字符串表示形式转换为等效的枚举对象")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("bool TryParse(string, out TEnum)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将一个或多个枚举常量的名称或数值的字符串表示形式转换为等效的枚举对象，返回值表示转换是否成功")])])])]),t._v(" "),e("h2",{attrs:{id:"c-变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-变量"}},[t._v("#")]),t._v(" c#变量")]),t._v(" "),e("p",[t._v("编译器需要用某个初始值对变量进行初始化之后才能在操作中使用该变量。")]),t._v(" "),e("p",[t._v("在这里，"),e("code",[t._v("data_type")]),t._v(" 必须是一个有效的 C# 数据类型，可以是 "),e("code",[t._v("char")]),t._v("、"),e("code",[t._v("int")]),t._v("、"),e("code",[t._v("float")]),t._v("、"),e("code",[t._v("double")]),t._v(" 或其他用户自定义的数据类型。"),e("code",[t._v("variablename")]),t._v(" 可以由一个或多个用逗号分隔的标识符名称组成。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 语法\n<datatype><variablename>=<value>;\n\n// 示例\nstring name = \"wang\";\n\n// 同时声明多个\nstring name1,name2 = \"wang\";\n\n  int d = 3, f = 5;    /* 初始化 d 和 f. */\n    byte z = 22;         /* 初始化 z. */\n    double pi = 3.14159; /* 声明 pi 的近似值 */\n    char x = 'x';        /* 变量 x 的值为 'x' */\n")])])]),e("h3",{attrs:{id:"接受来自用户的值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接受来自用户的值"}},[t._v("#")]),t._v(" 接受来自用户的值")]),t._v(" "),e("p",[e("code",[t._v("System")]),t._v(" 命名空间中的 "),e("code",[t._v("Console")]),t._v(" 类提供了一个函数 "),e("code",[t._v("ReadLine()")]),t._v("，用于接收来自用户的输入，并把它存储到一个变量中。")]),t._v(" "),e("p",[t._v("例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("        int num;\n            num = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(num);\n")])])]),e("p",[e("strong",[t._v("注意")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("变量是类或结构中的字段，如果没有显式初始化，创建这些变量时，默认值就是类型默认值")]),t._v(" "),e("li",[t._v("方法的局部变量必须在代码中显式初始化才能在语句中使用")]),t._v(" "),e("li",[t._v("在C#中实例化一个引用对象需要使用 "),e("code",[t._v("new")]),t._v(" 关键字把该引用指向存储在堆上的一个对象")])]),t._v(" "),e("h2",{attrs:{id:"c-运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-运算符"}},[t._v("#")]),t._v(" c# 运算符")]),t._v(" "),e("p",[t._v("运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C# 有丰富的内置运算符，分类如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("• 算术运算符\n• 关系运算符\n• 逻辑运算符\n• 位运算符\n• 赋值运算符\n• 其他运算符\n")])])]),e("h3",{attrs:{id:"一、算术运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、算术运算符"}},[t._v("#")]),t._v(" 一、算术运算符")]),t._v(" "),e("p",[t._v("下表显示了 C# 支持的所有算术运算符。假设变量 A 的值为 10，变量 B 的值为 20，则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("+")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("把两个操作数相加")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A + B 将得到 30")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从第一个操作数中减去第二个操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A - B 将得到 -10")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("*")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("把两个操作数相乘")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A B 将得到 200")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("/")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("分子除以分母")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("B / A 将得到 2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("%")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("取模运算符，整除后的余数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("B % A 将得到 0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("++")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("自增运算符，整数值增加 1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A++ 将得到 11")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("—")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("自减运算符，整数值减少 1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("A— 将得到 9")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('8 % 4      2余0      0\n\n9 % 4      2余1      1\n\n9 % 5      1余4      4\n\n11 % 5     2余1     1\n\n8 % 5      1余3      3\n\n得到的结果为做除法后的余数，%是求余运算符\n\n\n            int a = 21;\n            int b = 10;\n            int c;\n            c = a + b;\n            Console.WriteLine("Line 1 - c 的值是 {0}", c);\n            c = a - b;\n            Console.WriteLine("Line 2 - c 的值是 {0}", c);\n            c = a * b;\n            Console.WriteLine("Line 3 - c 的值是 {0}", c);\n            c = a / b;\n            Console.WriteLine("Line 4 - c 的值是 {0}", c);\n            c = a % b;\n            Console.WriteLine("Line 5 - c 的值是 {0}", c);\n            // ++a 先进行自增运算再赋值\n            c = ++a;\n            Console.WriteLine("Line 6 - c 的值是 {0}", c);\n            // 此时 a 的值为 22\n            // --a 先进行自减运算再赋值\n            c = --a;\n            Console.WriteLine("Line 7 - c 的值是 {0}", c);\n            Console.ReadLine();\n            \n    Line 1 - c 的值是 31\n    Line 2 - c 的值是 11\n    Line 3 - c 的值是 210\n    Line 4 - c 的值是 2\n    Line 5 - c 的值是 1\n    Line 6 - c 的值是 22\n    Line 7 - c 的值是 21\n• c = a++: 先将 a 赋值给 c，再对 a 进行自增运算。\n• c = ++a: 先将 a 进行自增运算，再将 a 赋值给 c 。\n• c = a--: 先将 a 赋值给 c，再对 a 进行自减运算。\n• c = --a: 先将 a 进行自减运算，再将 a 赋值给 c 。\n示例：\n               int a = 1;\n                int b;\n                // a++ **先赋值再进行自增运算**\n                b = a++;\n                Console.WriteLine("a = {0}", a);\n                Console.WriteLine("b = {0}", b);\n                Console.ReadLine();\n                // ++a **先进行自增运算再赋值**\n                a = 1; // 重新初始化 a\n                b = ++a;\n                Console.WriteLine("a = {0}", a);\n                Console.WriteLine("b = {0}", b);\n                Console.ReadLine();\n                // a-- 先赋值再进行自减运算\n                a = 1;  // 重新初始化 a\n                b= a--;\n                Console.WriteLine("a = {0}", a);\n                Console.WriteLine("b = {0}", b);\n                Console.ReadLine();\n                // --a 先进行自减运算再赋值\n                a = 1;  // 重新初始化 a\n                b= --a;\n                Console.WriteLine("a = {0}", a);\n                Console.WriteLine("b = {0}", b);\n                Console.ReadLine();\n')])])]),e("h3",{attrs:{id:"二、关系运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、关系运算符"}},[t._v("#")]),t._v(" 二、关系运算符")]),t._v(" "),e("p",[t._v("下表显示了 C# 支持的所有关系运算符。假设变量 A 的值为 10，变量 B 的值为 20，则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("==")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查两个操作数的值是否相等，如果相等则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A "),e("code",[t._v("== B)")]),t._v(" 不为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("!=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查两个操作数的值是否相等，如果不相等则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("(A != B)")]),t._v(" 为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v(">")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查左操作数的值是否大于右操作数的值，如果是则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("(A > B)")]),t._v(" 不为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查左操作数的值是否小于右操作数的值，如果是则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("(A < B)")]),t._v(" 为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v(">=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("(A >= B)")]),t._v(" 不为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("(A <= B)")]),t._v(" 为真。")])])])]),t._v(" "),e("h3",{attrs:{id:"三、逻辑运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、逻辑运算符"}},[t._v("#")]),t._v(" 三、逻辑运算符")]),t._v(" "),e("p",[t._v("下表显示了 C# 支持的所有逻辑运算符。假设变量 A 为布尔值 "),e("code",[t._v("true")]),t._v("，变量 B 为布尔值 "),e("code",[t._v("false")]),t._v("，则：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("&&")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("称为逻辑与运算符。如果两个操作数都非零，则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("(A && B)")]),t._v(" 为假。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("II")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("(A II B) 为真。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("!")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("!(A && B)")]),t._v(" 为真。")])])])]),t._v(" "),e("h3",{attrs:{id:"四、赋值运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、赋值运算符"}},[t._v("#")]),t._v(" 四、赋值运算符")]),t._v(" "),e("p",[t._v("下表列出了 C# 支持的赋值运算符：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("简单的赋值运算符，把右边操作数的值赋给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C = A + B 将把 A + B 的值赋给 C")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("+=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C += A 相当于 C = C + A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C -= A 相当于 C = C - A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("*=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C "),e("em",[t._v("= A 相当于 C = C")]),t._v(" A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("/=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C /= A 相当于 C = C / A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("%=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("求模且赋值运算符，求两个操作数的模赋值给左边操作数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C %= A 相当于 C = C % A")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<<=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("左移且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("C <<= 2")]),t._v(" 等同于 "),e("code",[t._v("C = C << 2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v(">>=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("右移且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("C >>= 2")]),t._v(" 等同于 "),e("code",[t._v("C = C >> 2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("&=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("按位与且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("C &= 2")]),t._v(" 等同于 "),e("code",[t._v("C = C & 2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("^=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("按位异或且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("C ^= 2")]),t._v(" 等同于 "),e("code",[t._v("C = C ^ 2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("I=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("按位或且赋值运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("C I= 2 等同于 C = C I 2")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('                int a = 21;\n                int c;\n                c = a;\n                Console.WriteLine("Line 1 - =  c 的值 = {0}", c);\n                c += a;\n                Console.WriteLine("Line 2 - += c 的值 = {0}", c);\n                c -= a;\n                Console.WriteLine("Line 3 - -=  c 的值 = {0}", c);\n                c *= a;\n                Console.WriteLine("Line 4 - *=  c 的值 = {0}", c);\n                c /= a;\n                Console.WriteLine("Line 5 - /=  c 的值 = {0}", c);\n                c = 200;\n                c %= a;\n                Console.WriteLine("Line 6 - %=  c 的值 = {0}", c);\n                c <<= 2;\n                Console.WriteLine("Line 7 - <<=  c 的值 = {0}", c);\n                c >>= 2;\n                Console.WriteLine("Line 8 - >>=  c 的值 = {0}", c);\n                c &= 2;\n                Console.WriteLine("Line 9 - &=  c 的值 = {0}", c);\n                c ^= 2;\n                Console.WriteLine("Line 10 - ^=  c 的值 = {0}", c);\n                c |= 2;\n                Console.WriteLine("Line 11 - |=  c 的值 = {0}", c);\n                Console.ReadLine();\n                \n                \n                \n    Line 1 - =     c 的值 = 21\n    Line 2 - +=    c 的值 = 42\n    Line 3 - -=    c 的值 = 21\n    Line 4 - *=    c 的值 = 441\n    Line 5 - /=    c 的值 = 21\n    Line 6 - %=    c 的值 = 11\n    Line 7 - <<=    c 的值 = 44\n    Line 8 - >>=    c 的值 = 11\n    Line 9 - &=    c 的值 = 2\n    Line 10 - ^=    c 的值 = 0\n    Line 11 - |=    c 的值 = 2\n')])])]),e("h3",{attrs:{id:"六、其他运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、其他运算符"}},[t._v("#")]),t._v(" 六、其他运算符")]),t._v(" "),e("p",[t._v("下表列出了 C# 支持的其他一些重要的运算符，包括 "),e("code",[t._v("sizeof")]),t._v("、"),e("code",[t._v("typeof")]),t._v(" 和 "),e("code",[t._v("? :")]),t._v("。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("实例")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("sizeof()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回数据类型的大小。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("sizeof(int)")]),t._v("，将返回 4.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("typeof()")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回 class 的类型。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("typeof(StreamReader);")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("返回变量的地址。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("&a; 将得到变量的实际地址。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}}),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("变量的指针。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("a; 将指向一个变量。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("? :")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("条件表达式")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("如果条件为真 ? 则为 X : 否则为 Y")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("is")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("判断对象是否为某一类型。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("If( Ford is Car) // 检查 Ford 是否是 Car 类的一个对象。")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("as")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("强制转换，即使转换失败也不会抛出异常。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v('Object obj = new StringReader("Hello");``StringReader r = obj as StringReader;')])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("？")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("可空类型和运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("int? a = null;"),e("br"),t._v("int? c = a + 4; //c=null")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("？？")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("空合并运算符")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("空合并运算符 "),e("code",[t._v("??")]),t._v(" 提供了快捷方式处理可空类型和引用类型时表示 "),e("code",[t._v("null")]),t._v(" 可能的值。如果第一个操作数不是"),e("code",[t._v("null")]),t._v("，值就等于第一个操作数的值/如果第一个操作数是"),e("code",[t._v("null")]),t._v("，值就等于第二个操作数的值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("checked/unchecked")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}}),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("如果把代码块标记为 "),e("code",[t._v("checked")]),t._v(" ， "),e("code",[t._v("CLR")]),t._v(" 就会执行栈溢出检测，如果要禁止栈溢出，则可以把代码标记 "),e("code",[t._v("unchecked")]),t._v(" 。")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('            /* sizeof 运算符的实例 */\n             Console.WriteLine("int 的大小是 {0}", sizeof(int));\n             Console.WriteLine("short 的大小是 {0}", sizeof(short));\n             Console.WriteLine("double 的大小是 {0}", sizeof(double));\n             /* 三元运算符符的实例 */\n             int a, b;\n             a = 10;\n             b = (a == 1) ? 20 : 30;\n             Console.WriteLine("b 的值是 {0}", b);\n             b = (a == 10) ? 20 : 30;\n             Console.WriteLine("b 的值是 {0}", b);\n             // 空合并运算符\n             int? a = null;\n             int b;\n             b = a ?? 10;//第一个操作数是null，值为第二个操作数.10\n             a = 3;\n             b = a ?? 10;//第一个操作数不是null，值为第一个操作数.3\n             // checked/unchecked\n           //byte类型最大取值255\n            byte a = 255;\n            checked\n           {\n              a++;\n           }\n//这里如果不加checed.++后输出0(不会抛异常，但会丢失数据，溢出的位会被舍弃，所以值为0)，加上后会抛出栈溢出异常\nConsole.WriteLine(a);\n             Console.ReadLine();\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    int 的大小是 4\n    short 的大小是 2\n    double 的大小是 8\n    b 的值是 30\n    b 的值是 20\n")])])]),e("h3",{attrs:{id:"七、c-中的运算符优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、c-中的运算符优先级"}},[t._v("#")]),t._v(" 七、C# 中的运算符优先级")]),t._v(" "),e("p",[t._v("运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。")]),t._v(" "),e("p",[t._v("例如 "),e("code",[t._v("x = 7 + 3 *2*")]),e("em",[t._v("，在这里，x 被赋值为 13，而不是 20，因为运算符")]),t._v(" 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。")]),t._v(" "),e("p",[t._v("下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("类别")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("结合性")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("后缀")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("() [] -> . ++ - -")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("一元")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("+ - ! ~ ++ - - (type) *& sizeof*")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("乘除")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("/ %")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("加减")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("+ -")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("移位")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("<< >>")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("关系")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("< <= > >=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("相等")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("== !=")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("位与 AND")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("位异或 XOR")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("位或 OR")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("I")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑与 AND")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("&&")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑或 OR")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("II")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("条件")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("?:")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("赋值")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("= += -= *= /= %=>>= <<= &= ^=")]),t._v(" I=")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("逗号")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v(",")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])])])]),t._v(" "),e("p",[t._v("示例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('             int a = 20;\n             int b = 10;\n             int c = 15;\n             int d = 5;\n             int e;\n             e = (a + b) * c / d;     // ( 30 * 15 ) / 5\n             Console.WriteLine("(a + b) * c / d 的值是 {0}", e);\n             e = ((a + b) * c) / d;   // (30 * 15 ) / 5\n             Console.WriteLine("((a + b) * c) / d 的值是 {0}", e);\n             e = (a + b) * (c / d);   // (30) * (15/5)\n             Console.WriteLine("(a + b) * (c / d) 的值是 {0}", e);\n             e = a + (b * c) / d;    //  20 + (150/5)\n             Console.WriteLine("a + (b * c) / d 的值是 {0}", e);\n             Console.ReadLine();\n')])])]),e("h3",{attrs:{id:"八、-预处理器指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、-预处理器指令"}},[t._v("#")]),t._v(" 八、*预处理器指令")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("#region/#endregion")]),t._v(" 指令用于把一段代码标记为有给定名称的一个块")]),t._v(" "),e("li",[e("code",[t._v("define/#undef")]),t._v(" 结合 "),e("code",[t._v("#if/#elif/endif")]),t._v(" 实现条件编译")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#define debug\nusing System;\n\nnamespace CSharp.Study.Test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n#if debug\n            Console.WriteLine("debug");\n#else\n          Console.WriteLine("other");\n#endif\n        }\n\n    }\n}\n')])])]),e("h2",{attrs:{id:"c-分支语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-分支语句"}},[t._v("#")]),t._v(" c#分支语句")]),t._v(" "),e("p",[t._v("分支结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。下面是大多数编程语言中典型的分支结构的一般形式：")]),t._v(" "),e("p",[t._v("分支语句大致有"),e("code",[t._v("if")]),t._v(" "),e("code",[t._v("else")]),t._v(" "),e("code",[t._v("switch")])]),t._v(" "),e("p",[e("strong",[t._v("变量作用域")])]),t._v(" "),e("p",[t._v("变量作用域指：可以访问该变量的代码区域")]),t._v(" "),e("p",[e("strong",[t._v("注意")]),t._v("：")]),t._v(" "),e("ul",[e("li",[t._v("只要类在某个作用域内，其字段(也称为成员变量)也在该作用域内")]),t._v(" "),e("li",[t._v("局部变量存在于表示声明该变量的块语句或方法结束的右花括号之前的作用域内")]),t._v(" "),e("li",[t._v("在 "),e("code",[t._v("for")]),t._v("、 "),e("code",[t._v("while")]),t._v(" "),e("code",[t._v("if")]),t._v(" "),e("code",[t._v("else")]),t._v(" "),e("code",[t._v("switch")]),t._v(" 或类似语句中声明的局部变量存在于该循环体内")])]),t._v(" "),e("h3",{attrs:{id:"一、if-else-语句-可以延续if-else-使用-else-if则须再加判断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、if-else-语句-可以延续if-else-使用-else-if则须再加判断"}},[t._v("#")]),t._v(" 一、if…else 语句（可以延续if else 使用  else if则须再加判断）")]),t._v(" "),e("p",[t._v("一个 "),e("code",[t._v("if")]),t._v(" 语句 后可跟一个可选的 "),e("code",[t._v("else")]),t._v(" 语句，"),e("code",[t._v("else")]),t._v(" 语句在布尔表达式为假时执行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    if(boolean_expression)\n    {\n       /* 如果布尔表达式为真将执行的语句 */\n    }\n    else if((boolean_expression)\n    {\n       /* 如果布尔表达式为真将执行的语句 */\n    }\n    else{\n      /* 如果布尔表达式为假将执行的语句 */\n    }\n")])])]),e("h3",{attrs:{id:"二、switch-语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、switch-语句"}},[t._v("#")]),t._v(" 二、switch 语句")]),t._v(" "),e("p",[t._v("一个 "),e("code",[t._v("switch")]),t._v(" 语句允许测试一个变量等于多个值时的情况。每个值称为一个 "),e("code",[t._v("case")]),t._v("，且被测试的变量会对每个 "),e("code",[t._v("switch case")]),t._v(" 进行检查。")]),t._v(" "),e("blockquote",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/* 局部变量定义 */\n               char grade = 'B';\n               switch (grade)\n               {\n                   case 'A':\n                       Console.WriteLine(\"很棒！\");\n                       break;\n                   case 'B':\n                   case 'C':\n                       Console.WriteLine(\"做得好\");\n                       break;\n                   case 'D':\n                       Console.WriteLine(\"您通过了\");\n                       break;\n                   case 'F':\n                       Console.WriteLine(\"最好再试一下\");\n                       break;\n                   default:\n                       Console.WriteLine(\"无效的成绩\");\n                       break;\n               }\n               Console.WriteLine(\"您的成绩是 {0}\", grade);\n               Console.ReadLine();\n")])])])]),t._v(" "),e("p",[e("strong",[t._v("switch 语句必须遵循下面的规则：")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("switch")]),t._v(" 语句中的 "),e("code",[t._v("expression")]),t._v(" 必须是一个整型或枚举类型，或者是一个 "),e("code",[t._v("class")]),t._v(" 类型，其中 "),e("code",[t._v("class")]),t._v(" 有一个单一的转换函数将其转换为整型或枚举类型。")]),t._v(" "),e("li",[t._v("在一个 "),e("code",[t._v("switch")]),t._v(" 中可以有任意数量的 "),e("code",[t._v("case")]),t._v(" 语句。每个 "),e("code",[t._v("case")]),t._v(" 后跟一个要比较的值和一个冒号。")]),t._v(" "),e("li",[e("code",[t._v("case")]),t._v(" 的 "),e("code",[t._v("constant-expression")]),t._v(" 必须与 "),e("code",[t._v("switch")]),t._v(" 中的变量具有相同的数据类型，且必须是一个常量。")]),t._v(" "),e("li",[t._v("当被测试的变量等于 "),e("code",[t._v("case")]),t._v(" 中的常量时，"),e("code",[t._v("case")]),t._v(" 后跟的语句将被执行，直到遇到 "),e("code",[t._v("break")]),t._v(" 语句为止。")]),t._v(" "),e("li",[t._v("当遇到 "),e("code",[t._v("break")]),t._v(" 语句时，"),e("code",[t._v("switch")]),t._v(" 终止，控制流将跳转到 "),e("code",[t._v("switch")]),t._v(" 语句后的下一行。")]),t._v(" "),e("li",[t._v("不是每一个 "),e("code",[t._v("case")]),t._v(" 都需要包含 "),e("code",[t._v("break")]),t._v("。如果 "),e("code",[t._v("case")]),t._v(" 语句为空，则可以不包含 "),e("code",[t._v("break")]),t._v("，控制流将会 继续 后续的 "),e("code",[t._v("case")]),t._v("，直到遇到 "),e("code",[t._v("break")]),t._v(" 为止。")]),t._v(" "),e("li",[t._v("C# 不允许从一个开关部分继续执行到下一个开关部分。如果 "),e("code",[t._v("case")]),t._v(" 语句中有处理语句，则必须包含 "),e("code",[t._v("break")]),t._v(" 或其他跳转语句。")]),t._v(" "),e("li",[t._v("一个 "),e("code",[t._v("switch")]),t._v(" 语句可以有一个可选的 "),e("code",[t._v("default case")]),t._v("，出现在 "),e("code",[t._v("switch")]),t._v(" 的结尾。"),e("code",[t._v("default case")]),t._v(" 可用于在上面所有 "),e("code",[t._v("case")]),t._v(" 都不为真时执行一个任务。"),e("code",[t._v("default case")]),t._v(" 中的 "),e("code",[t._v("break")]),t._v(" 语句不是必需的。")]),t._v(" "),e("li",[t._v("C# 不支持从一个 "),e("code",[t._v("case")]),t._v(" 标签显式贯穿到另一个 "),e("code",[t._v("case")]),t._v(" 标签。如果要使 C# 支持从一个 "),e("code",[t._v("case")]),t._v(" 标签显式贯穿到另一个 "),e("code",[t._v("case")]),t._v(" 标签，可以使用 "),e("code",[t._v("goto")]),t._v(" 一个 "),e("code",[t._v("switch-case")]),t._v(" 或 "),e("code",[t._v("goto default")]),t._v("。")])]),t._v(" "),e("h3",{attrs:{id:"三、-三目运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、-三目运算符"}},[t._v("#")]),t._v(" 三、？：三目运算符")]),t._v(" "),e("p",[t._v("我们已经在前面的章节中讲解了 条件运算符 "),e("code",[t._v("? :")]),t._v("，可以用来替代 "),e("code",[t._v("if…else")]),t._v(" 语句。它的一般形式如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    Exp1 ? Exp2 : Exp3;\n")])])]),e("p",[t._v("其中，"),e("code",[t._v("Exp1")]),t._v("、"),e("code",[t._v("Exp2")]),t._v(" 和 "),e("code",[t._v("Exp3")]),t._v(" 是表达式。请注意，冒号的使用和位置。")]),t._v(" "),e("p",[e("code",[t._v("?")]),t._v(" 表达式的值是由 "),e("code",[t._v("Exp1")]),t._v(" 决定的。如果 "),e("code",[t._v("Exp1")]),t._v(" 为真，则计算 "),e("code",[t._v("Exp2")]),t._v(" 的值，结果即为整个 "),e("code",[t._v("?")]),t._v(" 表达式的值。如果 "),e("code",[t._v("Exp1")]),t._v(" 为假，则计算 "),e("code",[t._v("Exp3")]),t._v(" 的值，结果即为整个 "),e("code",[t._v("?")]),t._v(" 表达式的值。")]),t._v(" "),e("h2",{attrs:{id:"c-循环语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-循环语句"}},[t._v("#")]),t._v(" c#循环语句")]),t._v(" "),e("h3",{attrs:{id:"一、while-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、while-循环"}},[t._v("#")]),t._v(" 一、while 循环")]),t._v(" "),e("p",[t._v("只要给定的条件为真，C# 中的 "),e("code",[t._v("while")]),t._v(" 循环语句会重复执行一个目标语句。")]),t._v(" "),e("p",[t._v("在这里，"),e("code",[t._v('Console.WriteLine("a 的值： {0}", a);')]),t._v(" 可以是一个单独的语句，也可以是几个语句组成的代码块。"),e("code",[t._v("a < 20")]),t._v(" 可以是任意的表达式，当为任意非零值时都为真。当条件为真时执行循环。")]),t._v(" "),e("p",[t._v("当条件为假时，程序流将继续执行紧接着循环的下一条语句。")]),t._v(" "),e("p",[t._v("在这里，"),e("code",[t._v("while")]),t._v(" 循环的关键点是循环可能一次都不会执行。当条件被测试且结果为假时，会跳过循环主体，直接执行紧接着 "),e("code",[t._v("while")]),t._v(" 循环的下一条语句。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/* 局部变量定义 */\n                int a = 10;\n                /* while 循环执行 */\n                while (a < 20)// 也就是说a=20或a>20则不会执行循环\n                {\n                    Console.WriteLine("a 的值： {0}", a);\n                    a++;\n                }\n                Console.ReadLine();\n                因为是a++\n                所以执行结果是\n                10\n                11\n                12\n                13\n                14\n                15\n                16\n                17\n                18\n                19\n')])])]),e("h3",{attrs:{id:"二、for-foreach-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、for-foreach-循环"}},[t._v("#")]),t._v(" 二、for /foreach 循环")]),t._v(" "),e("p",[e("strong",[t._v("下面是 for 循环的控制流：")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("int a = 10")]),t._v("会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。")]),t._v(" "),e("li",[t._v("接下来，会判断 "),e("code",[t._v("a < 20")]),t._v("。如果为真，则执行循环主体。如果为假，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。")]),t._v(" "),e("li",[t._v("在执行完 for 循环主体后，控制流会跳回上面的 "),e("code",[t._v("a = a + 1")]),t._v("语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。")]),t._v(" "),e("li",[t._v("条件再次被判断。如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为假时，for 循环终止。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' /* for 循环执行 */\n                for (int a = 10; a < 20; a = a + 1)\n                {\n                    Console.WriteLine("a 的值： {0}", a);\n                }\n                Console.ReadLine();\n')])])]),e("h4",{attrs:{id:"foreach"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[t._v("#")]),t._v(" foreach")]),t._v(" "),e("p",[t._v("C# 也支持 "),e("code",[t._v("foreach")]),t._v(" 循环，使用"),e("code",[t._v("foreach")]),t._v("可以迭代数组或者一个集合对象。")]),t._v(" "),e("p",[e("strong",[t._v("以下实例有三个部分：")])]),t._v(" "),e("ul",[e("li",[t._v("通过 "),e("code",[t._v("foreach")]),t._v(" 循环输出整型数组中的元素。")]),t._v(" "),e("li",[t._v("通过 "),e("code",[t._v("for")]),t._v(" 循环输出整型数组中的元素。")]),t._v(" "),e("li",[e("code",[t._v("foreach")]),t._v(" 循环设置数组元素的计算器。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('int[] fibarray = new int[] { 0, 1, 1, 2, 3, 5, 8, 13 };\n            foreach (int element in fibarray)\n            {\n                System.Console.WriteLine(element);\n            }\n            System.Console.WriteLine();\n            // 类似 foreach 循环\n            for (int i = 0; i < fibarray.Length; i++)\n            {\n                System.Console.WriteLine(fibarray[i]);\n            }\n            System.Console.WriteLine();\n            // 设置集合中元素的计算器\n            int count = 0;\n            foreach (int element in fibarray)\n            {\n                count += 1;\n                System.Console.WriteLine("Element #{0}: {1}", count, element);\n            }\n            System.Console.WriteLine("Number of elements in the array: {0}", count);\n')])])]),e("h3",{attrs:{id:"三、do-while-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、do-while-循环"}},[t._v("#")]),t._v(" 三、do…while 循环")]),t._v(" "),e("p",[t._v("不像 "),e("code",[t._v("for")]),t._v(" 和 "),e("code",[t._v("while")]),t._v(" 循环，它们是在循环头部测试循环条件。"),e("code",[t._v("do…while")]),t._v(" 循环是在循环的尾部检查它的条件。")]),t._v(" "),e("p",[e("code",[t._v("do…whil")]),t._v("e 循环与 "),e("code",[t._v("while")]),t._v(" 循环类似，但是 "),e("code",[t._v("do…while")]),t._v(" 循环会确保至少执行一次循环。")]),t._v(" "),e("p",[t._v("请注意，条件表达式出现在循环的尾部，所以循环中的 "),e("code",[t._v('Console.WriteLine("a 的值： {0}", a); a = a + 1;')]),t._v(" 会在条件被测试之前至少执行一次。")]),t._v(" "),e("p",[t._v("如果条件为真，控制流会跳转回上面的 "),e("code",[t._v("do")]),t._v("，然后重新执行循环中的 "),e("code",[t._v('Console.WriteLine("a 的值： {0}", a); a = a + 1;')]),t._v("。这个过程会不断重复，直到给定条件变为假为止。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' /* 局部变量定义 */\n                int a = 10;\n                /* do 循环执行 */\n                do\n                {\n                   Console.WriteLine("a 的值： {0}", a);\n                    a = a + 1;\n                } while (a < 20);// 条件\n                Console.ReadLine();\n')])])]),e("h3",{attrs:{id:"四、循环控制语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、循环控制语句"}},[t._v("#")]),t._v(" 四、循环控制语句")]),t._v(" "),e("p",[t._v("循环控制语句更改执行的正常序列。当执行离开一个范围时，所有在该范围中创建的自动对象都会被销毁。")]),t._v(" "),e("p",[t._v("C# 提供了下列的控制语句：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("break")]),t._v("语句。终止 "),e("code",[t._v("loop")]),t._v(" 或 "),e("code",[t._v("switch")]),t._v(" 语句，程序流将继续执行紧接着 "),e("code",[t._v("loop")]),t._v(" 或 "),e("code",[t._v("switch")]),t._v(" 的下一条语句。")]),t._v(" "),e("li",[e("code",[t._v("continue")]),t._v("语句。引起循环跳过主体的剩余部分，立即重新开始测试条件。")])]),t._v(" "),e("h4",{attrs:{id:"break语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#break语句"}},[t._v("#")]),t._v(" break语句")]),t._v(" "),e("p",[e("strong",[t._v("C# 中 break 语句有以下两种用法：")])]),t._v(" "),e("ul",[e("li",[t._v("当 "),e("code",[t._v("break")]),t._v(" 语句出现在一个循环内时，循环会立即终止，且程序流将继续执行紧接着循环的下一条语句。")]),t._v(" "),e("li",[t._v("它可用于终止 "),e("code",[t._v("switch")]),t._v(" 语句中的一个 "),e("code",[t._v("case")]),t._v("。")])]),t._v(" "),e("p"),t._v(" "),e("p",[t._v("如果您使用的是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('                /* 局部变量定义 */\n                int a = 10;\n                /* while 循环执行 */\n                while (a < 20)\n                {\n                    Console.WriteLine("a 的值： {0}", a);\n                    a++;\n                    if (a > 15)\n                    {\n                        /* 使用 break 语句终止 loop */\n                        break;\n                    }\n                }\n                Console.ReadLine();\n')])])]),e("h4",{attrs:{id:"continue-语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#continue-语句"}},[t._v("#")]),t._v(" continue 语句")]),t._v(" "),e("p",[t._v("C# 中的 "),e("code",[t._v("continue")]),t._v(" 语句有点像 "),e("code",[t._v("break")]),t._v(" 语句。但它不是强迫终止，"),e("code",[t._v("continue")]),t._v(" 会跳过当前循环中的代码，强迫开始下一次循环。对于 "),e("code",[t._v("for")]),t._v(" 循环，"),e("code",[t._v("continue")]),t._v(" 语句会导致执行条件测试和循环增量部分。对于 "),e("code",[t._v("while")]),t._v(" 和 "),e("code",[t._v("do…while")]),t._v(" 循环，"),e("code",[t._v("continue")]),t._v(" 语句会导致程序控制回到条件测试上。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/* 局部变量定义 */\n                int a = 10;\n                /* do 循环执行 */\n                do\n                {\n                    if (a == 15)\n                    {\n                        /* 跳过迭代 */\n                        a = a + 1;\n                        continue;\n                    }\n                    Console.WriteLine("a 的值： {0}", a);\n                    a++;\n                } while (a < 20);\n                Console.ReadLine();\n')])])]),e("h2",{attrs:{id:"c-访问修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-访问修饰符"}},[t._v("#")]),t._v(" c# *访问修饰符")]),t._v(" "),e("p",[t._v('封装 被定义为"把一个或多个项目封闭在一个物理的或者逻辑的包中"。在面向对象程序设计方法论中，封装是为了防止对实现细节的访问。')]),t._v(" "),e("p",[t._v("抽象和封装是面向对象程序设计的相关特性。抽象允许相关信息可视化，封装则使开发者实现所需级别的抽象。")]),t._v(" "),e("p",[t._v("C# 封装根据具体的需要，设置使用者的访问权限，并通过 访问修饰符 来实现。")]),t._v(" "),e("p",[t._v("一个 访问修饰符 定义了一个类成员的范围和可见性。C# 支持的访问修饰符如下所示：")]),t._v(" "),e("ul",[e("li",[t._v("Public：所有对象都可以访问；")]),t._v(" "),e("li",[t._v("Private：对象本身在对象内部可以访问；")]),t._v(" "),e("li",[t._v("Protected：只有该类对象及其子类对象可以访问")]),t._v(" "),e("li",[t._v("Internal：同一个程序集的对象可以访问；")]),t._v(" "),e("li",[t._v("Protected internal：该程序集内的派生类访问，是protected和internal的交集；")])]),t._v(" "),e("h3",{attrs:{id:"一、public-访问修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、public-访问修饰符"}},[t._v("#")]),t._v(" 一、Public 访问修饰符")]),t._v(" "),e("p",[e("code",[t._v("Public")]),t._v(" 访问修饰符允许一个类将其成员变量和成员函数暴露给其他的函数和对象。任何公有成员可以被外部的类访问。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' class Rectangle\n        {\n            //成员变量\n            public double length;\n            public double width;\n            public double GetArea()\n            {\n                return length * width;\n            }\n            public void Display()\n            {\n                Console.WriteLine("长度： {0}", length);\n                Console.WriteLine("宽度： {0}", width);\n                Console.WriteLine("面积： {0}", GetArea());\n            }\n        }// Rectangle 结束\n        class ExecuteRectangle\n        {\n            static void Main(string[] args)\n            {\n                Rectangle r = new Rectangle();\n                r.length = 4.5;\n            r.width = 3.5;\n                r.Display();\n                Console.ReadLine();\n            }\n        }\n')])])]),e("p",[t._v("在上面的实例中，成员变量 "),e("code",[t._v("length")]),t._v(" 和 "),e("code",[t._v("width")]),t._v(" 被声明为 "),e("code",[t._v("public")]),t._v("，所以它们可以被函数 "),e("code",[t._v("Main()")]),t._v(" 使用 "),e("code",[t._v("Rectangle")]),t._v(" 类的实例 "),e("code",[t._v("r")]),t._v(" 访问。")]),t._v(" "),e("p",[t._v("成员函数 "),e("code",[t._v("Display()")]),t._v(" 和 "),e("code",[t._v("GetArea()")]),t._v(" 可以直接访问这些变量。")]),t._v(" "),e("p",[t._v("成员函数 "),e("code",[t._v("Display()")]),t._v(" 也被声明为 "),e("code",[t._v("public")]),t._v("，所以它也能被 "),e("code",[t._v("Main()")]),t._v(" 使用 "),e("code",[t._v("Rectangle")]),t._v(" 类的实例 "),e("code",[t._v("r")]),t._v(" 访问。")]),t._v(" "),e("h3",{attrs:{id:"二、private-访问修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、private-访问修饰符"}},[t._v("#")]),t._v(" 二、Private 访问修饰符")]),t._v(" "),e("p",[e("code",[t._v("Private")]),t._v(" 访问修饰符允许一个类将其成员变量和成员函数对其他的函数和对象进行隐藏。只有同一个类中的函数可以访问它的私有成员。即使是类的实例也不能访问它的私有成员。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  //成员变量\n            private double length;\n            private double width;\n            public void Acceptdetails()\n            {\n                Console.WriteLine("请输入长度：");\n                length = Convert.ToDouble(Console.ReadLine());\n                Console.WriteLine("请输入宽度：");\n                width = Convert.ToDouble(Console.ReadLine());\n            }\n            public double GetArea()\n            {\n                return length * width;\n            }\n            public void Display()\n            {\n                Console.WriteLine("长度： {0}", length);\n                Console.WriteLine("宽度： {0}", width);\n                Console.WriteLine("面积： {0}", GetArea());\n            }\n        }//end class Rectangle    \n        class ExecuteRectangle\n        {\n            static void Main(string[] args)\n            {\n                Rectangle r = new Rectangle();\n                r.Acceptdetails();\n                r.Display();\n                Console.ReadLine();\n            }\n        }\n')])])]),e("p",[t._v("在上面的实例中，成员变量 "),e("code",[t._v("length")]),t._v(" 和 "),e("code",[t._v("width")]),t._v(" 被声明为 "),e("code",[t._v("private")]),t._v("，所以它们不能被函数 "),e("code",[t._v("Main()")]),t._v(" 访问。")]),t._v(" "),e("p",[t._v("成员函数 "),e("code",[t._v("AcceptDetails()")]),t._v(" 和 "),e("code",[t._v("Display()")]),t._v(" 可以访问这些变量。")]),t._v(" "),e("p",[t._v("由于成员函数 "),e("code",[t._v("AcceptDetails()")]),t._v(" 和 "),e("code",[t._v("Display()")]),t._v(" 被声明为 "),e("code",[t._v("public")]),t._v("，所以它们可以被 "),e("code",[t._v("Main()")]),t._v(" 使用 "),e("code",[t._v("Rectangle")]),t._v(" 类的实例 "),e("code",[t._v("r")]),t._v(" 访问。")]),t._v(" "),e("h3",{attrs:{id:"三、protected-访问修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、protected-访问修饰符"}},[t._v("#")]),t._v(" 三、Protected 访问修饰符")]),t._v(" "),e("p",[e("code",[t._v("Protected")]),t._v(" 访问修饰符允许子类访问它的基类的成员变量和成员函数。这样有助于实现继承。我们将在继承的章节详细讨论这个。更详细地讨论这个。")]),t._v(" "),e("h3",{attrs:{id:"四、internal-访问修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、internal-访问修饰符"}},[t._v("#")]),t._v(" 四、Internal 访问修饰符")]),t._v(" "),e("p",[e("code",[t._v("Internal")]),t._v(" 访问说明符允许一个类将其成员变量和成员函数暴露给当前程序中的其他函数和对象。换句话说，带有 "),e("code",[t._v("internal")]),t._v(" 访问修饰符的任何成员可以被定义在该成员所定义的应用程序内的任何类或方法访问。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' class Rectangle\n        {\n            //成员变量\n            internal double length;\n            internal double width;\n            double GetArea()\n            {\n                return length * width;\n            }\n           public void Display()\n            {\n                Console.WriteLine("长度： {0}", length);\n                Console.WriteLine("宽度： {0}", width);\n                Console.WriteLine("面积： {0}", GetArea());\n            }\n        }//end class Rectangle    \n        class ExecuteRectangle\n        {\n            static void Main(string[] args)\n            {\n                Rectangle r = new Rectangle();\n                r.length = 4.5;\n                r.width = 3.5;\n                r.Display();\n                Console.ReadLine();\n            }\n        }\n')])])]),e("p",[t._v("在上面的实例中，请注意成员函数 "),e("code",[t._v("GetArea()")]),t._v(" 声明的时候不带有任何访问修饰符。如果没有指定访问修饰符，则使用类成员的默认访问修饰符，即为 "),e("code",[t._v("private")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"五、protected-internal-访问修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、protected-internal-访问修饰符"}},[t._v("#")]),t._v(" 五、Protected Internal 访问修饰符")]),t._v(" "),e("p",[e("code",[t._v("Protected Internal")]),t._v(" 访问修饰符允许在本类,派生类或者包含该类的程序集中访问。这也被用于实现继承。")]),t._v(" "),e("h2",{attrs:{id:"c-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-方法"}},[t._v("#")]),t._v(" c#方法")]),t._v(" "),e("p",[t._v("当定义一个方法时，从根本上说是在声明它的结构的元素。在 C# 中，定义方法的语法如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("      <Access Specifier> <Return Type> <Method Name>(Parameter List)      {         Method Body      }\n")])])]),e("p"),t._v(" "),e("p",[e("strong",[t._v("下面是方法的各个元素：")])]),t._v(" "),e("ul",[e("li",[t._v("Access Specifier：访问修饰符，这个决定了变量或方法对于另一个类的可见性。")]),t._v(" "),e("li",[t._v("Return type：返回类型，一个方法可以返回一个值。返回类型是方法返回的值的数据类型。如果方法不返回任何值，则返回类型为 void。")]),t._v(" "),e("li",[t._v("Method name：方法名称，是一个唯一的标识符，且是大小写敏感的。它不能与类中声明的其他标识符相同。")]),t._v(" "),e("li",[t._v("Parameter list：参数列表，使用圆括号括起来，该参数是用来传递和接收方法的数据。参数列表是指方法的参数类型、顺序和数量。参数是可选的，也就是说，一个方法可能不包含参数。")]),t._v(" "),e("li",[t._v("Method body：方法主体，包含了完成任务所需的指令集。")])]),t._v(" "),e("h4",{attrs:{id:"一、创建方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、创建方法"}},[t._v("#")]),t._v(" 一、创建方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" public int FindMax(int num1, int num2)\n         {\n            /* 局部变量声明 */\n            int result;\n            if (num1 > num2)\n               result = num1;\n            else\n               result = num2;\n            return result;\n         }\n")])])]),e("h4",{attrs:{id:"二、c-中调用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、c-中调用方法"}},[t._v("#")]),t._v(" 二、C# 中调用方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' public int FindMax(int num1, int num2)\n            {\n               /* 局部变量声明 */\n               int result;\n               if (num1 > num2)\n                  result = num1;\n               else\n                  result = num2;\n               return result;\n            }\n            static void Main(string[] args)\n            {\n               /* 局部变量定义 */\n               int a = 100;\n               int b = 200;\n               int ret;\n               NumberManipulator n = new NumberManipulator();\n               //调用 FindMax 方法\n               ret = n.FindMax(a, b);\n               Console.WriteLine("最大值是： {0}", ret );\n               Console.ReadLine();\n            }\n')])])]),e("h3",{attrs:{id:"三、递归方法调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、递归方法调用"}},[t._v("#")]),t._v(" 三、递归方法调用")]),t._v(" "),e("p",[t._v("一个方法可以自我调用。这就是所谓的 递归。下面的实例使用递归函数计算一个数的阶乘：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('      using System;\n      namespace CalculatorApplication\n      {\n          class NumberManipulator\n          {\n              public int factorial(int num)\n              {\n                  /* 局部变量定义 */\n                  int result;\n                  if (num == 1)\n                  {\n                      return 1;\n                  }\n                  else\n                  {\n                      result = factorial(num - 1) * num;\n                      return result;\n                  }\n              }\n              static void Main(string[] args)\n              {\n                  NumberManipulator n = new NumberManipulator();\n                  //调用 factorial 方法\n                  Console.WriteLine("6 的阶乘是： {0}", n.factorial(6));\n                  Console.WriteLine("7 的阶乘是： {0}", n.factorial(7));\n                  Console.WriteLine("8 的阶乘是： {0}", n.factorial(8));\n                  Console.ReadLine();\n              }\n          }\n      }\n')])])]),e("p",[t._v("当上面的代码被编译和执行时，它会产生下列结果：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    6 的阶乘是： 720    7 的阶乘是： 5040    8 的阶乘是： 40320\n")])])]),e("p",[t._v("计算过程：")]),t._v(" "),e("blockquote",[e("p",[t._v("1\n2\n6\n24\n120   120 * 6\n6 的阶乘是： 720\n1\n2\n6\n24\n120\n720     720 * 7\n7 的阶乘是： 5040\n1\n2\n6\n24\n120\n720\n5040     5040*8\n8 的阶乘是： 40320")])]),t._v(" "),e("h3",{attrs:{id:"四、-参数传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、-参数传递"}},[t._v("#")]),t._v(" 四、*参数传递")]),t._v(" "),e("p",[t._v("当调用带有参数的方法时，您需要向方法传递参数。在 C# 中，有三种向方法传递参数的方式：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("方式")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("值参数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。在这种情况下，当形参的值发生改变时，"),e("strong",[t._v("不会影响实参的值")]),t._v("，从而保证了实参数据的安全。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("引用参数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("这种方式复制参数的内存位置的引用给形式参数。这意味着，**当形参的值发生改变时，同时也改变实参的值。**ref 初始化必须有值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("输出参数")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("这种方式可以返回多个值。out输出参数  不管是否传递这个参数都会从清0")])])])]),t._v(" "),e("h4",{attrs:{id:"按值传递参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按值传递参数"}},[t._v("#")]),t._v(" 按值传递参数")]),t._v(" "),e("p",[t._v("这是参数传递的默认方式。在这种方式下，当调用一个方法时，会为每个值参数创建一个新的存储位置。实际参数的值会复制给形参，实参和形参使用的是两个不同内存中的值。所以，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。下面的实例演示了这个概念：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('      using System;\n      namespace CalculatorApplication\n      {\n         class NumberManipulator\n         {\n            public void swap(int x, int y)\n            {\n               int temp;\n               temp = x; /* 保存 x 的值 */\n               x = y;    /* 把 y 赋值给 x */\n               y = temp; /* 把 temp 赋值给 y */\n            }\n            static void Main(string[] args)\n            {\n               NumberManipulator n = new NumberManipulator();\n               /* 局部变量定义 */\n               int a = 100;\n               int b = 200;\n               Console.WriteLine("在交换之前，a 的值： {0}", a);\n               Console.WriteLine("在交换之前，b 的值： {0}", b);\n               /* 调用函数来交换值 */\n               n.swap(a, b);\n               Console.WriteLine("在交换之后，a 的值： {0}", a);\n               Console.WriteLine("在交换之后，b 的值： {0}", b);\n               Console.ReadLine();\n            }\n         }\n      }\n')])])]),e("h4",{attrs:{id:"按引用传递参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按引用传递参数"}},[t._v("#")]),t._v(" 按引用传递参数")]),t._v(" "),e("p",[t._v("引用参数是一个对变量的内存位置的引用。当按引用传递参数时，与值参数不同的是，它不会为这些参数创建一个新的存储位置。引用参数表示与提供给方法的实际参数具有相同的内存位置。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('      using System;\n      namespace CalculatorApplication\n      {\n         class NumberManipulator\n         {\n            public void swap(ref int x, ref int y)\n            {\n               int temp;\n               temp = x; /* 保存 x 的值 */\n               x = y;    /* 把 y 赋值给 x */\n               y = temp; /* 把 temp 赋值给 y */\n             }\n            static void Main(string[] args)\n            {\n               NumberManipulator n = new NumberManipulator();\n               /* 局部变量定义 */\n               int a = 100;\n               int b = 200;\n               Console.WriteLine("在交换之前，a 的值： {0}", a);\n               Console.WriteLine("在交换之前，b 的值： {0}", b);\n               /* 调用函数来交换值 */\n               n.swap(ref a, ref b);\n               Console.WriteLine("在交换之后，a 的值： {0}", a);\n               Console.WriteLine("在交换之后，b 的值： {0}", b);\n               Console.ReadLine();\n            }\n         }\n      }\n')])])]),e("h4",{attrs:{id:"按输出传递参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按输出传递参数"}},[t._v("#")]),t._v(" 按输出传递参数")]),t._v(" "),e("p",[e("code",[t._v("return")]),t._v(" 语句可用于只从函数中返回一个值。但是，可以使用 "),e("strong",[t._v("输出参数")]),t._v(" 来从函数中返回两个值。输出参数会把方法输出的数据赋给自己，其他方面与引用参数相似。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('      using System;\n      namespace CalculatorApplication\n      {\n         class NumberManipulator\n         {\n            public void getValue(out int x )\n            {\n               int temp = 5;\n               x = temp;\n            }\n            static void Main(string[] args)\n            {\n               NumberManipulator n = new NumberManipulator();\n               /* 局部变量定义 */\n               int a = 100;\n               Console.WriteLine("在方法调用之前，a 的值： {0}", a);\n               /* 调用函数来获取值 */\n               n.getValue(out a);\n               Console.WriteLine("在方法调用之后，a 的值： {0}", a);\n               Console.ReadLine();\n            }\n         }\n      }\n')])])]),e("p",[t._v("提供给输出参数的变量不需要赋值。当需要从一个参数没有指定初始值的方法中返回值时，输出参数特别有用。请看下面的实例，来理解这一点：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('      using System;\n      namespace CalculatorApplication\n      {\n         class NumberManipulator\n         {\n            public void getValues(out int x, out int y )\n            {\n                Console.WriteLine("请输入第一个值： ");\n                x = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine("请输入第二个值： ");\n                y = Convert.ToInt32(Console.ReadLine());\n            }\n            static void Main(string[] args)\n            {\n               NumberManipulator n = new NumberManipulator();\n               /* 局部变量定义 */\n               int a , b;\n               /* 调用函数来获取值 */\n               n.getValues(out a, out b);\n               Console.WriteLine("在方法调用之后，a 的值： {0}", a);\n               Console.WriteLine("在方法调用之后，b 的值： {0}", b);\n               Console.ReadLine();\n            }\n         }\n      }\n')])])]),e("h1",{attrs:{id:"orm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#orm"}},[t._v("#")]),t._v(" ORM")]),t._v(" "),e("p",[e("strong",[t._v("object Realation Maping")]),t._v(" 数据库关系映射工具")]),t._v(" "),e("p",[t._v("其实是为了关系性数据库和C# 语言的映射 让开发者用对象操作关系数据库")]),t._v(" "),e("p",[t._v("ORM 就是将C#代码 转换成sql语句来操作数据")]),t._v(" "),e("p",[t._v("EFCore 官方推荐 尽量屏蔽底层数据库差异（模型驱动）（约定大于配置）")]),t._v(" "),e("p",[t._v("Dapper 数据库驱动")]),t._v(" "),e("p",[e("strong",[t._v("EFCore 与EF 差异")])]),t._v(" "),e("blockquote",[e("p",[t._v("EF 有DBFirst、ModelFirst 、CodeFrist")]),t._v(" "),e("p",[t._v("EFCore 不支持模型优先 推荐使用代码优先")]),t._v(" "),e("p",[t._v("EF不会再有新的特性增加 未来.net 有ORM的更新都会添加到EFCore")])]),t._v(" "),e("p",[t._v("EFCore 是对于底层ADO.NETCore的封装，因此ADO.NETCore支持的数据库不一定被EFCore支持")]),t._v(" "),e("p",[t._v("概念：Migration 数据库迁移")]),t._v(" "),e("blockquote",[e("p",[t._v("面向对象的ORM开发种，数据库不是程序员手动创建的而是由Migration 工具生成的。关系数据库只是盛放模型数据的一个媒介而已，理想状态下程序员不需要关心数据库的操作")]),t._v(" "),e("p",[t._v("根据对象的定义变化，自动更新数据库中的表以及表结构的操作叫做Migration （迁移）")]),t._v(" "),e("p",[t._v("迁移可以分为多步（项目进化），也可以回滚")])]),t._v(" "),e("h2",{attrs:{id:"efcore-基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#efcore-基本使用"}},[t._v("#")]),t._v(" EFCore 基本使用")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("Microsoft.EntityFrameworkCore.SqlServer")]),t._v(" 下载对应"),e("code",[t._v("nuget")]),t._v("包  （这个包安装不需要安装efcore的包单独装也可以）")])]),t._v(" "),e("li",[e("p",[t._v("建表中对应实体")]),t._v(" "),e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class SysUser\n{\n     /// <summary>\n        /// 账号\n        /// </summary>\n        public string UserName { get; set; }\n\n        /// <summary>\n        /// 密码\n        /// </summary>\n        public string PassWord { get; set; }\n\n        /// <summary>\n        /// 头像\n        /// </summary>\n        public string Avatar { get; set; }\n}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("实体的配置类")]),t._v(" "),e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' public class EntityConfiguration : IEntityTypeConfiguration<SysUser>\n    {\n        public void Configure(EntityTypeBuilder<SysUser> builder)\n        {\n            builder.ToTable("SysUser");\n        }\n    }\n')])])])]),t._v(" "),e("li",[e("p",[t._v("DbContext配置")]),t._v(" "),e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' public class MyDbContext : DbContext\n    {\n        public DbSet<SysUser> Users { get; set; }\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            base.OnConfiguring(optionsBuilder);\n            optionsBuilder.UseSqlServer("Server=WIN-OBVK2686PPL;uid=sa;pwd=123456;Database=CoreSchool;MultipleActiveResultSets=true;pooling=true;min pool size=5;max pool size=32767;connect timeout=20;Encrypt=True;TrustServerCertificate=True;");\n        }\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n            // 从当前程序集反射加载所有实现IEntityTypeConfiguration\n            modelBuilder.ApplyConfigurationsFromAssembly(this.GetType().Assembly);\n        }\n\n    }\n')])])])]),t._v(" "),e("li",[e("p",[t._v("使用"),e("code",[t._v("Migration")]),t._v(" 工具生成表 可以每次都对每次的命令写上对应的别名")]),t._v(" "),e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("安装对应 nuget 包 Microsoft.EntityFrameworkCore.Tools\n\n 初次加载（需要在DbContext所在的层使用）\n    Add-Migration Init\n  操作数据库\n    Update-Database\n    \n    \n （增删改字段都是这个流程）\n之后 不用再执行   Add-Migration Init   可以改为 Add-Migration 别名（操作列等方便记录）\n")])])])])])])}),[],!1,null,null,null);e.default=l.exports}}]);